"Implementation details for container_sbom rule"

load("//syft/private:file_mappings.bzl", "FILE_MAPPINGS")

_DOC = """Generate SBOM for an oci_tarball or oci_image using syft binary that is pulled as a toolchain.

```starlark
oci_image(
    name = "image"
)

oci_tarball(
    name = "image_tarball",
    image = ":image",
    repo_tags = []
)

syft_generate_sbom(
    name = "generate_sbom",
    type = "cyclonedx-json",
    image = ":image_tarball"
)
```
"""

_attrs = {
    "image": attr.label(allow_single_file = True, mandatory = True, doc = "Label to an oci_tarball or oci_image directory"),
    "type": attr.string(values = ["cyclonedx-json", "cyclonedx-xml", "syft-json", "syft-text", "spdx-tag-value", "spdx-json", "github-json"], mandatory = True, doc = "Type of sbom. Acceptable values are (cyclonedx-json|cyclonedx-xml|syft-json|syft-text|spdx-tag-value|spdx-json|github-json)"),
    "_windows_constraint": attr.label(default = "@platforms//os:windows"),
}

# see: https://github.com/anchore/syft#configuration
SYFT_CONFIG_TMPL = """\
# the output format(s) of the SBOM report
output:
{output}
"""

def syft_generate_sbom_impl(ctx):
    """
    Implementation for generating SBOM for an oci_tarball or oci_image using syft binary that is pulled as a toolchain.

    Args:
        ctx: action context

    Returns:
        sbom: Single file label that is the SBOM generated by this function
    """
    sbom = ctx.actions.declare_file("{}/sbom.{}".format(ctx.label.name, FILE_MAPPINGS[ctx.attr.type]))

    config_file = ctx.actions.declare_file("{}/syft-config.yaml".format(ctx.label.name))
    ctx.actions.write(
        output = config_file,
        content = SYFT_CONFIG_TMPL.format(
            output = "- {}={}".format(ctx.attr.type, sbom.path),
        ),
    )

    args = ctx.actions.args()
    args.add("--config", config_file.path)
    args.add(ctx.file.image.path)

    ctx.actions.run(
        executable = ctx.toolchains["@rules_syft//syft:toolchain_type"].syftinfo.target_tool_path,
        inputs = [config_file, ctx.file.image],
        arguments = [args],
        outputs = [sbom],
        tools = ctx.toolchains["@rules_syft//syft:toolchain_type"].syftinfo.tool_files,
        mnemonic = "SyftGenerateContainerSbom",
        progress_message = "Generating SBOM for %{label}",
    )

    return [
        DefaultInfo(files = depset([sbom])),
    ]

syft_generate_sbom = rule(
    implementation = syft_generate_sbom_impl,
    doc = _DOC,
    attrs = _attrs,
    toolchains = [
        "@bazel_tools//tools/sh:toolchain_type",
        "@rules_syft//syft:toolchain_type",
    ],
)
